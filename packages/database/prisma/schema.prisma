generator client {
  provider        = "prisma-client-js"
  output          = "../client"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocks    Stock[]

  @@map("users")
}

model Stock {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  symbol           String
  name             String
  sector           String
  purchasePrice    Float
  quantity         Int
  investment       Float
  portfolioPercent Float
  exchange         String

  marketCap        String?
  peRatioTTM       Float?
  latestEarnings   Float?
  revenueTTM       Float?
  ebitdaTTM        Float?
  ebitdaPercent    Float?
  pat              Float?
  patPercent       Float?
  cfoMarch24       Float?
  cfo5Years        Float?
  freeCashFlow5Years Float?
  debtToEquity     Float?
  bookValue        Float?
  revenueGrowth3Y  Float?
  ebitdaGrowth3Y   Float?
  profitGrowth3Y   Float?
  marketCapGrowth3Y Float?
  priceToSales     Float?
  cfoToEbitda      Float?
  cfoToPat         Float?
  priceToBook      Float?
  stage2           String?
  salePrice        Float?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  priceData        PriceData[]

  @@unique([userId, symbol])
  @@index([userId])
  @@index([sector])
  @@map("stocks")
}

model PriceData {
  id              Int      @id @default(autoincrement())
  stockId         Int
  stock           Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)

  currentPrice    Float
  presentValue    Float
  gainLoss        Float
  gainLossPercent Float?

  peRatio         Float?
  dividendYield   Float?
  dayHigh         Float?
  dayLow          Float?

  timestamp       DateTime @default(now())

  @@index([stockId, timestamp])
  @@map("price_data")
}

model PriceCache {
  id              Int      @id @default(autoincrement())
  symbol          String   @unique
  currentPrice    Float
  peRatio         Float?
  marketCap       String?

  dividendYield   Float?
  dayHigh         Float?
  dayLow          Float?
  avgVolume       String?
  peRatioTTM      Float?
  priceToBook     Float?
  bookValue       Float?
  debtToEquity    Float?
  revenueTTM      Float?
  ebitdaTTM       Float?
  profitMargin    Float?
  operatingMargin Float?
  returnOnEquity  Float?
  returnOnAssets  Float?
  sector          String?
  industry        String?
  prevClose       Float?
  dayRange        String?
  yearRange       String?

  cachedAt        DateTime @default(now())
  expiresAt       DateTime

  @@index([symbol, expiresAt])
  @@map("price_cache")
}
